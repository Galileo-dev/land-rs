= Introduction
The capability of landing a rocket has changed space exploration in the last couple of years. The ability to land a rocket with pinpoint accuracy lowers operational costs and increases mission success. @rlv:pl, which land meters or even centimetres from their target, play a critical role in the future of spaceflight as they allow for more frequent launches at a fraction of the price. However, achieving such precision is challenging and demands a robust approach to guidance that can generate optimal landing trajectories autonomously. Even in conditions with many uncertainties, such as wind and sensor noise, the algorithm must work reliably despite these uncertainties.

This FYP focuses on implementing and evaluating advanced trajectory optimisation strategies, comparing the performance of @sc and @drl algorithms for solving @apdg. We will mainly focus on @sc. @drl has advantages that make it a compelling option, such as built-in adaptability, resilience in dynamic environments, and the ability to learn from mistakes. However, mistakes in this context can be catastrophic. A landing can only be attempted once; if it fails, the rocket and payload are lost.

The main objective of this project is to compare @sc with @drl using metrics and computational efficiency. Develop a real-time simulation environment to test algorithms under realistic conditions. Implement our @sc algorithm based on existing work. Investigate the use of the Rust programming language in mission-critical applications. Finally, we will explore the existing literature involving @apdg with @sc and @drl.

Some of the key findings from this investigation show a trade-off between @sc and @drl; however, each method shows distinct advantages under different operational conditions.

This report is structured as follows: Chapter 2 reviews the literature on trajectory optimisation methods. Chapter 3 analyses the challenges specific to @apdg. Chapter 4 lays out the technology stack and why it was chosen. Chapter 5 provides a foundational understanding of convex optimisation needed for Chapter 6. Chapter 6 describes the implementation in detail. Chapter 7 outlines the simulation environment. Chapter 8 explains the methodology, research approach and how data was collected. Chapter 9 presents the results. Chapter 10 summarises the report with a conclusion summarising the key insights and suggests future enhancements.
